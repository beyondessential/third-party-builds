name: Build and upload WAL-G to S3

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - .github/workflows/wal-g.yml

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  GO_VERSION: 1.22
  WALG_VERSION: 3.0.0

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: x86_64-unknown-linux-gnu
            goos: linux
            goarch: amd64
          - os: Linux-ARM64
            name: aarch64-unknown-linux-gnu
            goos: linux
            goarch: arm64
          - os: windows-latest
            name: x86_64-pc-windows-gnu
            goos: windows
            goarch: amd64
          - os: macos-14
            name: x86_64-apple-darwin
            goos: darwin
            goarch: amd64
          - os: macos-14
            name: aarch64-apple-darwin
            goos: darwin
            goarch: arm64

    runs-on: ${{ matrix.os }}
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout wal-g source
        uses: actions/checkout@v4
        with:
          repository: wal-g/wal-g
          # use master until new release >3.0.0
          # ref: v${{ env.WALG_VERSION }}

      - name: Install wal-g dependencies
        if: contains(matrix.name, 'linux')
        run: sudo apt install -y curl cmake build-essential
      - name: Install wal-g dependencies
        if: contains(matrix.name, 'darwin')
        run: brew install cmake

      - run: make deps
      - run: make pg_build

      - shell: bash
        run: |
          ext=""
          [[ "${{ matrix.goos }}" == "windows" ]] && ext=".exe"
          mv main/pg/wal-g$ext wal-g-${{ matrix.name }}$ext
      - uses: actions/upload-artifact@v4
        with:
          name: wal-g-${{ matrix.name }}
          path: |
            wal-g-${{ matrix.name }}
            wal-g-${{ matrix.name }}.exe
          if-no-files-found: error

  upload:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write #Â OIDC token for AWS login
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wal-g-*
          merge-multiple: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-ops-scripts-s3
          role-session-name: GHA@Ops=WalG

      - name: Upload
        run: |
          for f in wal-g-*; do
            aws s3 cp $f s3://bes-ops-tools/wal-g/${{ env.WALG_VERSION }}/$f --no-progress
            aws s3 cp $f s3://bes-ops-tools/wal-g/latest/$f --no-progress
          done

      - name: Clear cache
        run: aws cloudfront create-invalidation --distribution-id=EDAG0UBS1MN74 --paths '/wal-g/*'
